// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compileFiles Produces two files which match snapshots 1`] = `
Object {
  "env": Object {
    "es2021": true,
    "shared-node-browser": true,
  },
  "overrides": Array [
    Object {
      "files": Array [
        "**/*.d.ts",
      ],
      "rules": Object {
        "@typescript-eslint/no-unused-vars": "off",
      },
    },
    Object {
      "files": Array [
        "**/*.ts",
      ],
      "rules": Object {
        "@typescript-eslint/naming-convention": Array [
          "error",
          Object {
            "filter": Object {
              "match": false,
              "regex": "[- ]",
            },
            "format": Array [
              "strictCamelCase",
            ],
            "leadingUnderscore": "allowSingleOrDouble",
            "selector": Array [
              "variable",
              "function",
              "classProperty",
              "objectLiteralProperty",
              "parameterProperty",
              "classMethod",
              "objectLiteralMethod",
              "typeMethod",
              "accessor",
            ],
            "trailingUnderscore": "allow",
          },
          Object {
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "typeLike",
          },
          Object {
            "format": Array [
              "StrictPascalCase",
            ],
            "prefix": Array [
              "is",
              "has",
              "can",
              "should",
              "will",
              "did",
            ],
            "selector": "variable",
            "types": Array [
              "boolean",
            ],
          },
          Object {
            "filter": "^(?!I)[A-Z]",
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "interface",
          },
          Object {
            "filter": "^T$|^[A-Z][A-Za-z]+$",
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "typeParameter",
          },
          Object {
            "format": null,
            "modifiers": Array [
              "requiresQuotes",
            ],
            "selector": Array [
              "classProperty",
              "objectLiteralProperty",
            ],
          },
        ],
      },
    },
    Object {
      "env": Object {
        "jest": true,
        "jest/globals": true,
      },
      "files": Array [
        "*.{spec,test}.{js,jsx,ts,tsx}",
        "**/__tests__/**/*.{js,jsx,ts,tsx}",
      ],
      "plugins": Array [
        "jest",
      ],
      "rules": Object {
        "jest/expect-expect": Array [
          "error",
        ],
        "jest/max-nested-describe": Array [
          "error",
        ],
        "jest/no-alias-methods": Array [
          "error",
        ],
        "jest/no-commented-out-tests": Array [
          "error",
        ],
        "jest/no-conditional-expect": Array [
          "error",
        ],
        "jest/no-conditional-in-test": Array [
          "error",
        ],
        "jest/no-deprecated-functions": Array [
          "error",
        ],
        "jest/no-disabled-tests": Array [
          "error",
        ],
        "jest/no-done-callback": Array [
          "error",
        ],
        "jest/no-export": Array [
          "error",
        ],
        "jest/no-focused-tests": Array [
          "error",
        ],
        "jest/no-identical-title": Array [
          "error",
        ],
        "jest/no-if": Array [
          "error",
        ],
        "jest/no-interpolation-in-snapshots": Array [
          "error",
        ],
        "jest/no-jasmine-globals": Array [
          "error",
        ],
        "jest/no-jest-import": Array [
          "error",
        ],
        "jest/no-large-snapshots": Array [
          "error",
          Object {
            "maxSize": 300,
          },
        ],
        "jest/no-mocks-import": Array [
          "error",
        ],
        "jest/no-standalone-expect": Array [
          "error",
        ],
        "jest/no-test-prefixes": Array [
          "error",
        ],
        "jest/prefer-called-with": Array [
          "error",
        ],
        "jest/prefer-comparison-matcher": Array [
          "error",
        ],
        "jest/prefer-equality-matcher": Array [
          "error",
        ],
        "jest/prefer-hooks-on-top": Array [
          "error",
        ],
        "jest/prefer-snapshot-hint": Array [
          "error",
        ],
        "jest/prefer-to-be": Array [
          "error",
        ],
        "jest/prefer-to-contain": Array [
          "error",
        ],
        "jest/prefer-to-have-length": Array [
          "error",
        ],
        "jest/prefer-todo": Array [
          "error",
        ],
        "jest/valid-describe-callback": Array [
          "error",
        ],
        "jest/valid-expect": Array [
          "error",
        ],
        "jest/valid-expect-in-promise": Array [
          "error",
        ],
        "jest/valid-title": Array [
          "error",
        ],
      },
    },
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": Object {
    "ecmaVersion": "latest",
    "project": "tsconfig.json",
    "sourceType": "module",
    "warnOnUnsupportedTypeScriptVersion": false,
  },
  "plugins": Array [
    "@typescript-eslint",
    "import",
    "unicorn",
  ],
  "reportUnusedDisableDirectives": true,
  "rules": Object {
    "@typescript-eslint/adjacent-overload-signatures": Array [
      "error",
    ],
    "@typescript-eslint/array-type": Array [
      "warn",
      Object {
        "default": "array-simple",
      },
    ],
    "@typescript-eslint/await-thenable": Array [
      "error",
    ],
    "@typescript-eslint/ban-ts-comment": Array [
      "error",
      Object {
        "minimumDescriptionLength": 4,
        "ts-expect-error": "allow-with-description",
      },
    ],
    "@typescript-eslint/ban-tslint-comment": Array [
      "warn",
    ],
    "@typescript-eslint/ban-types": Array [
      "warn",
      Object {
        "extendDefaults": false,
        "types": Object {
          "Boolean": Object {
            "fixWith": "boolean",
            "message": "Use \`boolean\` instead.",
          },
          "Function": "Use a specific function type instead, like \`() => void\`.",
          "Number": Object {
            "fixWith": "number",
            "message": "Use \`number\` instead.",
          },
          "Object": Object {
            "fixWith": "Record<string, unknown>",
            "message": "The \`Object\` type is mostly the same as \`unknown\`. You probably want \`Record<string, unknown>\` instead. See https://github.com/typescript-eslint/typescript-eslint/pull/848",
          },
          "String": Object {
            "fixWith": "string",
            "message": "Use \`string\` instead.",
          },
          "Symbol": Object {
            "fixWith": "symbol",
            "message": "Use \`symbol\` instead.",
          },
          "[[[[[]]]]]": "ðŸ¦„ðŸ’¥",
          "[[[[]]]]": "ur drunk ðŸ¤¡",
          "[[[]]]": "Don't use \`[[[]]]\`. Use \`SomeType[][][]\` instead.",
          "[[]]": "Don't use \`[[]]\`. It only allows an array with a single element which is an empty array. Use \`SomeType[][]\` instead.",
          "[]": "Don't use the empty array type \`[]\`. It only allows empty arrays. Use \`SomeType[]\` instead.",
          "null": Object {
            "fixWith": "undefined",
            "message": "Use \`undefined\` instead. See: https://github.com/sindresorhus/meta/issues/7",
          },
          "object": Object {
            "fixWith": "Record<string, unknown>",
            "message": "The \`object\` type is hard to use. Use \`Record<string, unknown>\` instead. See: https://github.com/typescript-eslint/typescript-eslint/pull/848",
          },
          "{}": Object {
            "fixWith": "Record<string, unknown>",
            "message": "The \`{}\` type is mostly the same as \`unknown\`. You probably want \`Record<string, unknown>\` instead.",
          },
        },
      },
    ],
    "@typescript-eslint/class-literal-property-style": Array [
      "warn",
      "getters",
    ],
    "@typescript-eslint/consistent-indexed-object-style": Array [
      "warn",
    ],
    "@typescript-eslint/consistent-type-assertions": Array [
      "error",
      Object {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "allow-as-parameter",
      },
    ],
    "@typescript-eslint/default-param-last": Array [
      "error",
    ],
    "@typescript-eslint/dot-notation": Array [
      "warn",
    ],
    "@typescript-eslint/lines-between-class-members": Array [
      "warn",
      "always",
      Object {
        "exceptAfterSingleLine": true,
      },
    ],
    "@typescript-eslint/member-ordering": Array [
      "error",
      Object {
        "default": Array [
          "signature",
          "public-static-field",
          "public-static-method",
          "protected-static-field",
          "protected-static-method",
          "private-static-field",
          "private-static-method",
          "static-field",
          "static-method",
          "public-decorated-field",
          "public-instance-field",
          "public-abstract-field",
          "public-field",
          "protected-decorated-field",
          "protected-instance-field",
          "protected-abstract-field",
          "protected-field",
          "private-decorated-field",
          "private-instance-field",
          "private-abstract-field",
          "private-field",
          "instance-field",
          "abstract-field",
          "decorated-field",
          "field",
          "public-constructor",
          "protected-constructor",
          "private-constructor",
          "constructor",
          "public-decorated-method",
          "public-instance-method",
          "public-abstract-method",
          "public-method",
          "protected-decorated-method",
          "protected-instance-method",
          "protected-abstract-method",
          "protected-method",
          "private-decorated-method",
          "private-instance-method",
          "private-abstract-method",
          "private-method",
          "instance-method",
          "abstract-method",
          "decorated-method",
          "method",
        ],
      },
    ],
    "@typescript-eslint/naming-convention": Array [
      "error",
      Object {
        "filter": Object {
          "match": false,
          "regex": "[- ]",
        },
        "format": Array [
          "strictCamelCase",
        ],
        "leadingUnderscore": "allowSingleOrDouble",
        "selector": Array [
          "variable",
          "function",
          "classProperty",
          "objectLiteralProperty",
          "parameterProperty",
          "classMethod",
          "objectLiteralMethod",
          "typeMethod",
          "accessor",
        ],
        "trailingUnderscore": "allow",
      },
      Object {
        "format": Array [
          "StrictPascalCase",
        ],
        "selector": "typeLike",
      },
      Object {
        "format": Array [
          "StrictPascalCase",
        ],
        "prefix": Array [
          "is",
          "has",
          "can",
          "should",
          "will",
          "did",
        ],
        "selector": "variable",
        "types": Array [
          "boolean",
        ],
      },
      Object {
        "filter": "^(?!I)[A-Z]",
        "format": Array [
          "StrictPascalCase",
        ],
        "selector": "interface",
      },
      Object {
        "filter": "^T$|^[A-Z][a-zA-Z]+$",
        "format": Array [
          "StrictPascalCase",
        ],
        "selector": "typeParameter",
      },
      Object {
        "format": null,
        "modifiers": Array [
          "requiresQuotes",
        ],
        "selector": Array [
          "classProperty",
          "objectLiteralProperty",
        ],
      },
    ],
    "@typescript-eslint/no-array-constructor": Array [
      "warn",
    ],
    "@typescript-eslint/no-base-to-string": Array [
      "error",
    ],
    "@typescript-eslint/no-confusing-void-expression": Array [
      "warn",
    ],
    "@typescript-eslint/no-dupe-class-members": Array [
      "error",
    ],
    "@typescript-eslint/no-duplicate-imports": Array [
      "error",
    ],
    "@typescript-eslint/no-dynamic-delete": Array [
      "warn",
    ],
    "@typescript-eslint/no-empty-function": Array [
      "error",
    ],
    "@typescript-eslint/no-empty-interface": Array [
      "warn",
      Object {
        "allowSingleExtends": true,
      },
    ],
    "@typescript-eslint/no-explicit-any": Array [
      "warn",
    ],
    "@typescript-eslint/no-extra-non-null-assertion": Array [
      "warn",
    ],
    "@typescript-eslint/no-extraneous-class": Array [
      "error",
      Object {
        "allowConstructorOnly": false,
        "allowEmpty": false,
        "allowStaticOnly": false,
        "allowWithDecorator": true,
      },
    ],
    "@typescript-eslint/no-floating-promises": Array [
      "error",
      Object {
        "ignoreIIFE": true,
        "ignoreVoid": true,
      },
    ],
    "@typescript-eslint/no-for-in-array": Array [
      "error",
    ],
    "@typescript-eslint/no-implicit-any-catch": Array [
      "warn",
    ],
    "@typescript-eslint/no-implied-eval": Array [
      "error",
    ],
    "@typescript-eslint/no-inferrable-types": Array [
      "warn",
    ],
    "@typescript-eslint/no-invalid-this": Array [
      "error",
    ],
    "@typescript-eslint/no-invalid-void-type": Array [
      "error",
    ],
    "@typescript-eslint/no-loop-func": Array [
      "error",
    ],
    "@typescript-eslint/no-loss-of-precision": Array [
      "error",
    ],
    "@typescript-eslint/no-meaningless-void-operator": Array [
      "warn",
    ],
    "@typescript-eslint/no-misused-new": Array [
      "error",
    ],
    "@typescript-eslint/no-misused-promises": Array [
      "error",
      Object {
        "checksConditionals": true,
        "checksVoidReturn": false,
      },
    ],
    "@typescript-eslint/no-namespace": Array [
      "error",
    ],
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": Array [
      "error",
    ],
    "@typescript-eslint/no-non-null-asserted-optional-chain": Array [
      "error",
    ],
    "@typescript-eslint/no-non-null-assertion": Array [
      "error",
    ],
    "@typescript-eslint/no-parameter-properties": Array [
      "error",
    ],
    "@typescript-eslint/no-redeclare": Array [
      "error",
    ],
    "@typescript-eslint/no-require-imports": Array [
      "error",
    ],
    "@typescript-eslint/no-restricted-imports": Array [
      "error",
      Array [
        "error",
        "domain",
        "freelist",
        "smalloc",
        "punycode",
        "sys",
        "querystring",
        "colors",
      ],
    ],
    "@typescript-eslint/no-shadow": Array [
      "error",
    ],
    "@typescript-eslint/no-this-alias": Array [
      "error",
      Object {
        "allowDestructuring": true,
      },
    ],
    "@typescript-eslint/no-throw-literal": Array [
      "error",
      Object {
        "allowThrowingAny": false,
        "allowThrowingUnknown": true,
      },
    ],
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-condition": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-qualifier": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-type-arguments": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-type-assertion": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-type-constraint": Array [
      "warn",
    ],
    "@typescript-eslint/no-unsafe-argument": Array [
      "error",
    ],
    "@typescript-eslint/no-unsafe-assignment": Array [
      "error",
    ],
    "@typescript-eslint/no-unsafe-call": Array [
      "error",
    ],
    "@typescript-eslint/no-unsafe-member-access": Array [
      "error",
    ],
    "@typescript-eslint/no-unsafe-return": Array [
      "error",
    ],
    "@typescript-eslint/no-unused-expressions": Array [
      "error",
    ],
    "@typescript-eslint/no-unused-vars": Array [
      "error",
      Object {
        "args": "after-used",
        "argsIgnorePattern": "^_",
        "caughtErrors": "all",
        "caughtErrorsIgnorePattern": "^_$",
        "ignoreRestSiblings": true,
        "vars": "all",
      },
    ],
    "@typescript-eslint/no-use-before-define": Array [
      "error",
      "nofunc",
    ],
    "@typescript-eslint/no-useless-constructor": Array [
      "error",
    ],
    "@typescript-eslint/no-var-requires": Array [
      "error",
    ],
    "@typescript-eslint/non-nullable-type-assertion-style": Array [
      "warn",
    ],
    "@typescript-eslint/padding-line-between-statements": Array [
      "warn",
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "multiline-block-like",
      },
    ],
    "@typescript-eslint/prefer-as-const": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-enum-initializers": Array [
      "error",
    ],
    "@typescript-eslint/prefer-for-of": Array [
      "error",
    ],
    "@typescript-eslint/prefer-function-type": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-includes": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-literal-enum-member": Array [
      "error",
    ],
    "@typescript-eslint/prefer-namespace-keyword": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-nullish-coalescing": Array [
      "error",
    ],
    "@typescript-eslint/prefer-optional-chain": Array [
      "error",
    ],
    "@typescript-eslint/prefer-readonly": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-reduce-type-parameter": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-regexp-exec": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-return-this-type": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-string-starts-ends-with": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-ts-expect-error": Array [
      "warn",
    ],
    "@typescript-eslint/promise-function-async": Array [
      "warn",
    ],
    "@typescript-eslint/require-array-sort-compare": Array [
      "error",
      Object {
        "ignoreStringArrays": true,
      },
    ],
    "@typescript-eslint/require-await": Array [
      "error",
    ],
    "@typescript-eslint/restrict-plus-operands": Array [
      "error",
      Object {
        "allowAny": false,
        "checkCompoundAssignments": true,
      },
    ],
    "@typescript-eslint/restrict-template-expressions": Array [
      "error",
      Object {
        "allowNumber": true,
      },
    ],
    "@typescript-eslint/return-await": Array [
      "warn",
    ],
    "@typescript-eslint/switch-exhaustiveness-check": Array [
      "error",
    ],
    "@typescript-eslint/triple-slash-reference": Array [
      "error",
    ],
    "@typescript-eslint/unbound-method": Array [
      "error",
    ],
    "@typescript-eslint/unified-signatures": Array [
      "error",
    ],
    "accessor-pairs": Array [
      "error",
    ],
    "array-callback-return": Array [
      "error",
    ],
    "arrow-body-style": Array [
      "warn",
    ],
    "block-scoped-var": Array [
      "error",
    ],
    "camelcase": Array [
      "error",
      Object {
        "properties": "always",
      },
    ],
    "capitalized-comments": Array [
      "warn",
      "always",
      Object {
        "ignoreConsecutiveComments": true,
        "ignoreInlineComments": true,
        "ignorePattern": "pragma|ignore|prettier-ignore|webpack\\\\w+:|c8",
      },
    ],
    "class-methods-use-this": Array [
      "error",
      Object {
        "exceptMethods": Array [
          "render",
          "getInitialState",
          "getDefaultProps",
          "getChildContext",
          "componentWillMount",
          "UNSAFE_componentWillMount",
          "componentDidMount",
          "componentWillReceiveProps",
          "UNSAFE_componentWillReceiveProps",
          "shouldComponentUpdate",
          "componentWillUpdate",
          "UNSAFE_componentWillUpdate",
          "componentDidUpdate",
          "componentWillUnmount",
          "componentDidCatch",
          "getSnapshotBeforeUpdate",
        ],
      },
    ],
    "complexity": Array [
      "error",
      20,
    ],
    "constructor-super": Array [
      "error",
    ],
    "default-case": Array [
      "error",
      Object {
        "commentPattern": "^no default$",
      },
    ],
    "default-case-last": Array [
      "error",
    ],
    "eqeqeq": Array [
      "warn",
      "smart",
    ],
    "for-direction": Array [
      "error",
    ],
    "func-name-matching": Array [
      "error",
    ],
    "func-names": Array [
      "error",
    ],
    "getter-return": Array [
      "error",
    ],
    "grouped-accessor-pairs": Array [
      "error",
      "getBeforeSet",
    ],
    "guard-for-in": Array [
      "error",
    ],
    "id-denylist": Array [
      "error",
    ],
    "id-match": Array [
      "error",
      "^\\\\$?(__)?(([A-Z]|[a-z]|[0-9]+)|([A-Z_]))*\\\\$?$",
    ],
    "import/default": Array [
      "error",
    ],
    "import/export": Array [
      "error",
    ],
    "import/first": Array [
      "warn",
    ],
    "import/no-absolute-path": Array [
      "error",
    ],
    "import/no-amd": Array [
      "error",
    ],
    "import/no-anonymous-default-export": Array [
      "error",
    ],
    "import/no-deprecated": Array [
      "error",
    ],
    "import/no-duplicates": Array [
      "warn",
    ],
    "import/no-extraneous-dependencies": Array [
      "error",
    ],
    "import/no-import-module-exports": Array [
      "warn",
    ],
    "import/no-mutable-exports": Array [
      "error",
    ],
    "import/no-named-as-default": Array [
      "error",
    ],
    "import/no-named-as-default-member": Array [
      "error",
    ],
    "import/no-named-default": Array [
      "error",
    ],
    "import/no-relative-packages": Array [
      "error",
    ],
    "import/no-self-import": Array [
      "error",
    ],
    "import/no-unresolved": Array [
      "error",
    ],
    "import/no-webpack-loader-syntax": Array [
      "error",
    ],
    "import/order": Array [
      "warn",
      Object {
        "groups": Array [
          "builtin",
          Array [
            "external",
            "internal",
          ],
          "parent",
          Array [
            "sibling",
            "index",
          ],
        ],
      },
    ],
    "max-depth": Array [
      "error",
      4,
    ],
    "max-lines": Array [
      "error",
      Object {
        "max": 2500,
        "skipBlankLines": false,
        "skipComments": false,
      },
    ],
    "max-nested-callbacks": Array [
      "error",
      4,
    ],
    "max-params": Array [
      "error",
      Object {
        "max": 4,
      },
    ],
    "max-statements-per-line": Array [
      "error",
    ],
    "new-cap": Array [
      "error",
    ],
    "no-alert": Array [
      "error",
    ],
    "no-async-promise-executor": Array [
      "error",
    ],
    "no-await-in-loop": Array [
      "error",
    ],
    "no-bitwise": Array [
      "error",
    ],
    "no-buffer-constructor": Array [
      "error",
    ],
    "no-caller": Array [
      "error",
    ],
    "no-case-declarations": Array [
      "error",
    ],
    "no-class-assign": Array [
      "error",
    ],
    "no-compare-neg-zero": Array [
      "error",
    ],
    "no-cond-assign": Array [
      "error",
    ],
    "no-const-assign": Array [
      "error",
    ],
    "no-constant-condition": Array [
      "error",
    ],
    "no-constructor-return": Array [
      "error",
    ],
    "no-control-regex": Array [
      "error",
    ],
    "no-debugger": Array [
      "error",
    ],
    "no-delete-var": Array [
      "error",
    ],
    "no-div-regex": Array [
      "warn",
    ],
    "no-dupe-args": Array [
      "error",
    ],
    "no-dupe-else-if": Array [
      "error",
    ],
    "no-dupe-keys": Array [
      "error",
    ],
    "no-duplicate-case": Array [
      "error",
    ],
    "no-else-return": Array [
      "warn",
      Object {
        "allowElseIf": false,
      },
    ],
    "no-empty": Array [
      "error",
    ],
    "no-empty-character-class": Array [
      "error",
    ],
    "no-empty-pattern": Array [
      "error",
    ],
    "no-eq-null": Array [
      "error",
    ],
    "no-eval": Array [
      "error",
    ],
    "no-ex-assign": Array [
      "error",
    ],
    "no-extend-native": Array [
      "error",
    ],
    "no-extra-bind": Array [
      "warn",
    ],
    "no-extra-boolean-cast": Array [
      "warn",
    ],
    "no-extra-label": Array [
      "warn",
    ],
    "no-fallthrough": Array [
      "error",
    ],
    "no-func-assign": Array [
      "error",
    ],
    "no-global-assign": Array [
      "error",
    ],
    "no-implicit-coercion": Array [
      "warn",
    ],
    "no-implicit-globals": Array [
      "error",
    ],
    "no-import-assign": Array [
      "error",
    ],
    "no-inner-declarations": Array [
      "error",
    ],
    "no-invalid-regexp": Array [
      "error",
    ],
    "no-irregular-whitespace": Array [
      "error",
    ],
    "no-iterator": Array [
      "error",
    ],
    "no-label-var": Array [
      "error",
    ],
    "no-labels": Array [
      "error",
    ],
    "no-lone-blocks": Array [
      "error",
    ],
    "no-lonely-if": Array [
      "warn",
    ],
    "no-misleading-character-class": Array [
      "error",
    ],
    "no-multi-assign": Array [
      "error",
    ],
    "no-multi-str": Array [
      "error",
    ],
    "no-native-reassign": Array [
      "error",
    ],
    "no-negated-condition": Array [
      "error",
    ],
    "no-negated-in-lhs": Array [
      "error",
    ],
    "no-new": Array [
      "error",
    ],
    "no-new-func": Array [
      "error",
    ],
    "no-new-object": Array [
      "error",
    ],
    "no-new-symbol": Array [
      "error",
    ],
    "no-new-wrappers": Array [
      "error",
    ],
    "no-nonoctal-decimal-escape": Array [
      "error",
    ],
    "no-obj-calls": Array [
      "error",
    ],
    "no-octal": Array [
      "error",
    ],
    "no-octal-escape": Array [
      "error",
    ],
    "no-promise-executor-return": Array [
      "error",
    ],
    "no-proto": Array [
      "error",
    ],
    "no-prototype-builtins": Array [
      "error",
    ],
    "no-regex-spaces": Array [
      "warn",
    ],
    "no-restricted-globals": Array [
      "error",
      "addEventListener",
      "blur",
      "close",
      "closed",
      "confirm",
      "defaultStatus",
      "defaultstatus",
      "event",
      "external",
      "find",
      "focus",
      "frameElement",
      "frames",
      "history",
      "innerHeight",
      "innerWidth",
      "length",
      "location",
      "locationbar",
      "menubar",
      "moveBy",
      "moveTo",
      "name",
      "onblur",
      "onerror",
      "onfocus",
      "onload",
      "onresize",
      "onunload",
      "open",
      "opener",
      "opera",
      "outerHeight",
      "outerWidth",
      "pageXOffset",
      "pageYOffset",
      "parent",
      "print",
      "removeEventListener",
      "resizeBy",
      "resizeTo",
      "screen",
      "screenLeft",
      "screenTop",
      "screenX",
      "screenY",
      "scroll",
      "scrollbars",
      "scrollBy",
      "scrollTo",
      "scrollX",
      "scrollY",
      "self",
      "status",
      "statusbar",
      "stop",
      "toolbar",
      "top",
    ],
    "no-restricted-properties": Array [
      "error",
      Object {
        "message": "Please use import() instead. More info: https://facebook.github.io/create-react-app/docs/code-splitting",
        "object": "require",
        "property": "ensure",
      },
      Object {
        "message": "Please use import() instead. More info: https://facebook.github.io/create-react-app/docs/code-splitting",
        "object": "System",
        "property": "import",
      },
    ],
    "no-restricted-syntax": Array [
      "error",
      "WithStatement",
    ],
    "no-return-assign": Array [
      "error",
    ],
    "no-return-await": Array [
      "error",
    ],
    "no-script-url": Array [
      "error",
    ],
    "no-self-assign": Array [
      "error",
    ],
    "no-self-compare": Array [
      "error",
    ],
    "no-sequences": Array [
      "error",
    ],
    "no-setter-return": Array [
      "error",
    ],
    "no-shadow-restricted-names": Array [
      "error",
    ],
    "no-sparse-arrays": Array [
      "error",
    ],
    "no-template-curly-in-string": Array [
      "error",
    ],
    "no-this-before-super": Array [
      "error",
    ],
    "no-undef": Array [
      "error",
      Object {
        "typeof": true,
      },
    ],
    "no-undef-init": Array [
      "warn",
    ],
    "no-underscore-dangle": Array [
      "error",
      Object {
        "allow": Array [
          "__REDUX_DEVTOOLS_EXTENSION_COMPOSE__",
        ],
        "allowAfterSuper": false,
        "allowAfterThis": false,
        "enforceInMethodNames": true,
      },
    ],
    "no-unmodified-loop-condition": Array [
      "error",
    ],
    "no-unneeded-ternary": Array [
      "warn",
    ],
    "no-unreachable": Array [
      "error",
    ],
    "no-unreachable-loop": Array [
      "error",
    ],
    "no-unsafe-finally": Array [
      "error",
    ],
    "no-unsafe-negation": Array [
      "error",
    ],
    "no-unsafe-optional-chaining": Array [
      "error",
      Object {
        "disallowArithmeticOperators": true,
      },
    ],
    "no-unused-labels": Array [
      "warn",
    ],
    "no-unused-private-class-members": Array [
      "error",
    ],
    "no-use-before-define": Array [
      "error",
      Object {
        "classes": false,
        "functions": false,
        "variables": false,
      },
    ],
    "no-useless-backreference": Array [
      "error",
    ],
    "no-useless-call": Array [
      "error",
    ],
    "no-useless-catch": Array [
      "error",
    ],
    "no-useless-computed-key": Array [
      "warn",
      Object {
        "enforceForClassMembers": true,
      },
    ],
    "no-useless-concat": Array [
      "error",
    ],
    "no-useless-escape": Array [
      "error",
    ],
    "no-useless-rename": Array [
      "warn",
    ],
    "no-useless-return": Array [
      "warn",
    ],
    "no-var": Array [
      "warn",
    ],
    "no-void": Array [
      "error",
      Object {
        "allowAsStatement": true,
      },
    ],
    "no-with": Array [
      "error",
    ],
    "object-shorthand": Array [
      "warn",
      "properties",
    ],
    "one-var": Array [
      "warn",
      "never",
    ],
    "operator-assignment": Array [
      "warn",
      "always",
    ],
    "prefer-arrow-callback": Array [
      "warn",
      Object {
        "allowNamedFunctions": true,
      },
    ],
    "prefer-const": Array [
      "warn",
      Object {
        "destructuring": "all",
      },
    ],
    "prefer-destructuring": Array [
      "warn",
      Object {
        "AssignmentExpression": Object {
          "array": false,
          "object": false,
        },
        "VariableDeclarator": Object {
          "array": false,
          "object": true,
        },
      },
      Object {
        "enforceForRenamedProperties": false,
      },
    ],
    "prefer-exponentiation-operator": Array [
      "warn",
    ],
    "prefer-numeric-literals": Array [
      "warn",
    ],
    "prefer-object-has-own": Array [
      "warn",
    ],
    "prefer-object-spread": Array [
      "warn",
    ],
    "prefer-promise-reject-errors": Array [
      "error",
      Object {
        "allowEmptyReject": true,
      },
    ],
    "prefer-regex-literals": Array [
      "error",
    ],
    "prefer-rest-params": Array [
      "error",
    ],
    "prefer-spread": Array [
      "error",
    ],
    "prefer-template": Array [
      "warn",
    ],
    "radix": Array [
      "error",
    ],
    "require-yield": Array [
      "error",
    ],
    "spaced-comment": Array [
      "warn",
      "always",
      Object {
        "block": Object {
          "balanced": true,
          "exceptions": Array [
            "-",
            "+",
            "*",
          ],
          "markers": Array [
            "!",
            "*",
          ],
        },
        "line": Object {
          "exceptions": Array [
            "-",
            "+",
            "*",
          ],
          "markers": Array [
            "!",
            "/",
            "=>",
          ],
        },
      },
    ],
    "strict": Array [
      "warn",
    ],
    "symbol-description": Array [
      "error",
    ],
    "unicorn/better-regex": Array [
      "warn",
    ],
    "unicorn/catch-error-name": Array [
      "warn",
    ],
    "unicorn/consistent-destructuring": Array [
      "warn",
    ],
    "unicorn/consistent-function-scoping": Array [
      "error",
    ],
    "unicorn/error-message": Array [
      "error",
    ],
    "unicorn/escape-case": Array [
      "warn",
    ],
    "unicorn/expiring-todo-comments": Array [
      "error",
    ],
    "unicorn/explicit-length-check": Array [
      "warn",
    ],
    "unicorn/filename-case": Array [
      "error",
    ],
    "unicorn/import-style": Array [
      "error",
    ],
    "unicorn/new-for-builtins": Array [
      "warn",
    ],
    "unicorn/no-abusive-eslint-disable": Array [
      "error",
    ],
    "unicorn/no-array-callback-reference": Array [
      "error",
    ],
    "unicorn/no-array-for-each": Array [
      "warn",
    ],
    "unicorn/no-array-method-this-argument": Array [
      "warn",
    ],
    "unicorn/no-array-push-push": Array [
      "warn",
    ],
    "unicorn/no-array-reduce": Array [
      "error",
    ],
    "unicorn/no-await-expression-member": Array [
      "warn",
    ],
    "unicorn/no-console-spaces": Array [
      "warn",
    ],
    "unicorn/no-document-cookie": Array [
      "error",
    ],
    "unicorn/no-empty-file": Array [
      "error",
    ],
    "unicorn/no-for-loop": Array [
      "warn",
    ],
    "unicorn/no-hex-escape": Array [
      "warn",
    ],
    "unicorn/no-instanceof-array": Array [
      "warn",
    ],
    "unicorn/no-invalid-remove-event-listener": Array [
      "error",
    ],
    "unicorn/no-lonely-if": Array [
      "warn",
    ],
    "unicorn/no-new-array": Array [
      "warn",
    ],
    "unicorn/no-new-buffer": Array [
      "warn",
    ],
    "unicorn/no-object-as-default-parameter": Array [
      "error",
    ],
    "unicorn/no-process-exit": Array [
      "error",
    ],
    "unicorn/no-static-only-class": Array [
      "warn",
    ],
    "unicorn/no-thenable": Array [
      "error",
    ],
    "unicorn/no-this-assignment": Array [
      "error",
    ],
    "unicorn/no-unreadable-array-destructuring": Array [
      "warn",
    ],
    "unicorn/no-useless-fallback-in-spread": Array [
      "warn",
    ],
    "unicorn/no-useless-length-check": Array [
      "warn",
    ],
    "unicorn/no-useless-promise-resolve-reject": Array [
      "warn",
    ],
    "unicorn/no-useless-spread": Array [
      "warn",
    ],
    "unicorn/no-useless-undefined": Array [
      "warn",
    ],
    "unicorn/no-zero-fractions": Array [
      "warn",
    ],
    "unicorn/numeric-separators-style": Array [
      "warn",
    ],
    "unicorn/prefer-add-event-listener": Array [
      "warn",
    ],
    "unicorn/prefer-array-find": Array [
      "warn",
    ],
    "unicorn/prefer-array-flat": Array [
      "warn",
    ],
    "unicorn/prefer-array-flat-map": Array [
      "warn",
    ],
    "unicorn/prefer-array-index-of": Array [
      "warn",
    ],
    "unicorn/prefer-array-some": Array [
      "warn",
    ],
    "unicorn/prefer-code-point": Array [
      "error",
    ],
    "unicorn/prefer-date-now": Array [
      "warn",
    ],
    "unicorn/prefer-default-parameters": Array [
      "warn",
    ],
    "unicorn/prefer-dom-node-append": Array [
      "warn",
    ],
    "unicorn/prefer-dom-node-dataset": Array [
      "warn",
    ],
    "unicorn/prefer-dom-node-remove": Array [
      "warn",
    ],
    "unicorn/prefer-dom-node-text-content": Array [
      "error",
    ],
    "unicorn/prefer-export-from": Array [
      "warn",
    ],
    "unicorn/prefer-includes": Array [
      "warn",
    ],
    "unicorn/prefer-json-parse-buffer": Array [
      "warn",
    ],
    "unicorn/prefer-keyboard-event-key": Array [
      "warn",
    ],
    "unicorn/prefer-math-trunc": Array [
      "warn",
    ],
    "unicorn/prefer-modern-dom-apis": Array [
      "warn",
    ],
    "unicorn/prefer-module": Array [
      "warn",
    ],
    "unicorn/prefer-negative-index": Array [
      "warn",
    ],
    "unicorn/prefer-node-protocol": Array [
      "warn",
    ],
    "unicorn/prefer-number-properties": Array [
      "warn",
    ],
    "unicorn/prefer-object-from-entries": Array [
      "warn",
    ],
    "unicorn/prefer-optional-catch-binding": Array [
      "warn",
    ],
    "unicorn/prefer-prototype-methods": Array [
      "warn",
    ],
    "unicorn/prefer-query-selector": Array [
      "warn",
    ],
    "unicorn/prefer-reflect-apply": Array [
      "warn",
    ],
    "unicorn/prefer-regexp-test": Array [
      "warn",
    ],
    "unicorn/prefer-set-has": Array [
      "warn",
    ],
    "unicorn/prefer-spread": Array [
      "warn",
    ],
    "unicorn/prefer-string-slice": Array [
      "warn",
    ],
    "unicorn/prefer-string-starts-ends-with": Array [
      "warn",
    ],
    "unicorn/prefer-string-trim-start-end": Array [
      "warn",
    ],
    "unicorn/prefer-switch": Array [
      "warn",
    ],
    "unicorn/prefer-ternary": Array [
      "warn",
    ],
    "unicorn/prefer-type-error": Array [
      "warn",
    ],
    "unicorn/prevent-abbreviations": Array [
      "warn",
    ],
    "unicorn/relative-url-style": Array [
      "warn",
    ],
    "unicorn/require-array-join-separator": Array [
      "warn",
    ],
    "unicorn/require-number-to-fixed-digits-argument": Array [
      "warn",
    ],
    "unicorn/template-indent": Array [
      "warn",
    ],
    "unicorn/text-encoding-identifier-case": Array [
      "error",
    ],
    "unicorn/throw-new-error": Array [
      "warn",
    ],
    "use-isnan": Array [
      "error",
    ],
    "valid-typeof": Array [
      "error",
    ],
    "vars-on-top": Array [
      "error",
    ],
    "yoda": Array [
      "warn",
    ],
  },
  "settings": Object {
    "import/extensions": Array [
      ".js",
      ".ts",
    ],
    "import/parsers": Object {
      "@typescript-eslint/parser": Array [
        ".ts",
        ".tsx",
      ],
    },
    "import/resolver": Object {
      "node": Object {
        "extensions": Array [
          ".js",
          ".jsx",
          ".ts",
          ".tsx",
        ],
      },
    },
  },
}
`;

exports[`compileFiles Produces two files which match snapshots 2`] = `
Object {
  "env": Object {
    "es2021": true,
    "shared-node-browser": true,
  },
  "overrides": Array [
    Object {
      "files": Array [
        "**/*.d.ts",
      ],
      "rules": Object {
        "@typescript-eslint/no-unused-vars": "off",
      },
    },
    Object {
      "files": Array [
        "**/*.ts",
      ],
      "rules": Object {
        "@typescript-eslint/naming-convention": Array [
          "error",
          Object {
            "filter": Object {
              "match": false,
              "regex": "[- ]",
            },
            "format": Array [
              "strictCamelCase",
            ],
            "leadingUnderscore": "allowSingleOrDouble",
            "selector": Array [
              "variable",
              "function",
              "classProperty",
              "objectLiteralProperty",
              "parameterProperty",
              "classMethod",
              "objectLiteralMethod",
              "typeMethod",
              "accessor",
            ],
            "trailingUnderscore": "allow",
          },
          Object {
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "typeLike",
          },
          Object {
            "format": Array [
              "StrictPascalCase",
            ],
            "prefix": Array [
              "is",
              "has",
              "can",
              "should",
              "will",
              "did",
            ],
            "selector": "variable",
            "types": Array [
              "boolean",
            ],
          },
          Object {
            "filter": "^(?!I)[A-Z]",
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "interface",
          },
          Object {
            "filter": "^T$|^[A-Z][A-Za-z]+$",
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "typeParameter",
          },
          Object {
            "format": null,
            "modifiers": Array [
              "requiresQuotes",
            ],
            "selector": Array [
              "classProperty",
              "objectLiteralProperty",
            ],
          },
        ],
      },
    },
    Object {
      "files": Array [
        "**/*.tsx",
      ],
      "rules": Object {
        "@typescript-eslint/naming-convention": Array [
          "error",
          Object {
            "filter": Object {
              "match": false,
              "regex": "[- ]",
            },
            "format": Array [
              "strictCamelCase",
              "StrictPascalCase",
            ],
            "leadingUnderscore": "allowSingleOrDouble",
            "selector": Array [
              "variable",
              "function",
              "classProperty",
              "objectLiteralProperty",
              "parameterProperty",
              "classMethod",
              "objectLiteralMethod",
              "typeMethod",
              "accessor",
            ],
            "trailingUnderscore": "allow",
          },
          Object {
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "typeLike",
          },
          Object {
            "format": Array [
              "StrictPascalCase",
            ],
            "prefix": Array [
              "is",
              "has",
              "can",
              "should",
              "will",
              "did",
            ],
            "selector": "variable",
            "types": Array [
              "boolean",
            ],
          },
          Object {
            "filter": "^(?!I)[A-Z]",
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "interface",
          },
          Object {
            "filter": "^T$|^[A-Z][A-Za-z]+$",
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "typeParameter",
          },
          Object {
            "format": null,
            "modifiers": Array [
              "requiresQuotes",
            ],
            "selector": Array [
              "classProperty",
              "objectLiteralProperty",
            ],
          },
        ],
      },
    },
    Object {
      "files": Array [
        "*.{spec,test}.{js,jsx,ts,tsx}",
        "**/__tests__/**/*.{js,jsx,ts,tsx}",
      ],
      "plugins": Array [
        "testing-library",
      ],
      "rules": Object {
        "testing-library/await-async-query": Array [
          "error",
        ],
        "testing-library/await-async-utils": Array [
          "error",
        ],
        "testing-library/no-await-sync-query": Array [
          "error",
        ],
        "testing-library/no-container": Array [
          "error",
        ],
        "testing-library/no-debugging-utils": Array [
          "error",
        ],
        "testing-library/no-dom-import": Array [
          "error",
          "react",
        ],
        "testing-library/no-node-access": Array [
          "error",
        ],
        "testing-library/no-promise-in-fire-event": Array [
          "error",
        ],
        "testing-library/no-render-in-setup": Array [
          "error",
        ],
        "testing-library/no-unnecessary-act": Array [
          "error",
        ],
        "testing-library/no-wait-for-empty-callback": Array [
          "error",
        ],
        "testing-library/no-wait-for-multiple-assertions": Array [
          "error",
        ],
        "testing-library/no-wait-for-side-effects": Array [
          "error",
        ],
        "testing-library/no-wait-for-snapshot": Array [
          "error",
        ],
        "testing-library/prefer-find-by": Array [
          "error",
        ],
        "testing-library/prefer-presence-queries": Array [
          "error",
        ],
        "testing-library/prefer-query-by-disappearance": Array [
          "error",
        ],
        "testing-library/prefer-screen-queries": Array [
          "error",
        ],
        "testing-library/render-result-naming-convention": Array [
          "error",
        ],
      },
    },
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": Object {
    "ecmaFeatures": Object {
      "jsx": true,
    },
    "ecmaVersion": "latest",
    "project": "tsconfig.json",
    "sourceType": "module",
    "warnOnUnsupportedTypeScriptVersion": false,
  },
  "plugins": Array [
    "@typescript-eslint",
    "import",
    "unicorn",
    "react",
    "jsx-a11y",
    "react-hooks",
  ],
  "reportUnusedDisableDirectives": true,
  "rules": Object {
    "@typescript-eslint/adjacent-overload-signatures": Array [
      "error",
    ],
    "@typescript-eslint/array-type": Array [
      "warn",
      Object {
        "default": "array-simple",
      },
    ],
    "@typescript-eslint/await-thenable": Array [
      "error",
    ],
    "@typescript-eslint/ban-ts-comment": Array [
      "error",
      Object {
        "minimumDescriptionLength": 4,
        "ts-expect-error": "allow-with-description",
      },
    ],
    "@typescript-eslint/ban-tslint-comment": Array [
      "warn",
    ],
    "@typescript-eslint/ban-types": Array [
      "warn",
      Object {
        "extendDefaults": false,
        "types": Object {
          "Boolean": Object {
            "fixWith": "boolean",
            "message": "Use \`boolean\` instead.",
          },
          "Function": "Use a specific function type instead, like \`() => void\`.",
          "Number": Object {
            "fixWith": "number",
            "message": "Use \`number\` instead.",
          },
          "Object": Object {
            "fixWith": "Record<string, unknown>",
            "message": "The \`Object\` type is mostly the same as \`unknown\`. You probably want \`Record<string, unknown>\` instead. See https://github.com/typescript-eslint/typescript-eslint/pull/848",
          },
          "String": Object {
            "fixWith": "string",
            "message": "Use \`string\` instead.",
          },
          "Symbol": Object {
            "fixWith": "symbol",
            "message": "Use \`symbol\` instead.",
          },
          "[[[[[]]]]]": "ðŸ¦„ðŸ’¥",
          "[[[[]]]]": "ur drunk ðŸ¤¡",
          "[[[]]]": "Don't use \`[[[]]]\`. Use \`SomeType[][][]\` instead.",
          "[[]]": "Don't use \`[[]]\`. It only allows an array with a single element which is an empty array. Use \`SomeType[][]\` instead.",
          "[]": "Don't use the empty array type \`[]\`. It only allows empty arrays. Use \`SomeType[]\` instead.",
          "null": Object {
            "fixWith": "undefined",
            "message": "Use \`undefined\` instead. See: https://github.com/sindresorhus/meta/issues/7",
          },
          "object": Object {
            "fixWith": "Record<string, unknown>",
            "message": "The \`object\` type is hard to use. Use \`Record<string, unknown>\` instead. See: https://github.com/typescript-eslint/typescript-eslint/pull/848",
          },
          "{}": Object {
            "fixWith": "Record<string, unknown>",
            "message": "The \`{}\` type is mostly the same as \`unknown\`. You probably want \`Record<string, unknown>\` instead.",
          },
        },
      },
    ],
    "@typescript-eslint/class-literal-property-style": Array [
      "warn",
      "getters",
    ],
    "@typescript-eslint/consistent-indexed-object-style": Array [
      "warn",
    ],
    "@typescript-eslint/consistent-type-assertions": Array [
      "error",
      Object {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "allow-as-parameter",
      },
    ],
    "@typescript-eslint/default-param-last": Array [
      "error",
    ],
    "@typescript-eslint/dot-notation": Array [
      "warn",
    ],
    "@typescript-eslint/lines-between-class-members": Array [
      "warn",
      "always",
      Object {
        "exceptAfterSingleLine": true,
      },
    ],
    "@typescript-eslint/member-ordering": Array [
      "error",
      Object {
        "default": Array [
          "signature",
          "public-static-field",
          "public-static-method",
          "protected-static-field",
          "protected-static-method",
          "private-static-field",
          "private-static-method",
          "static-field",
          "static-method",
          "public-decorated-field",
          "public-instance-field",
          "public-abstract-field",
          "public-field",
          "protected-decorated-field",
          "protected-instance-field",
          "protected-abstract-field",
          "protected-field",
          "private-decorated-field",
          "private-instance-field",
          "private-abstract-field",
          "private-field",
          "instance-field",
          "abstract-field",
          "decorated-field",
          "field",
          "public-constructor",
          "protected-constructor",
          "private-constructor",
          "constructor",
          "public-decorated-method",
          "public-instance-method",
          "public-abstract-method",
          "public-method",
          "protected-decorated-method",
          "protected-instance-method",
          "protected-abstract-method",
          "protected-method",
          "private-decorated-method",
          "private-instance-method",
          "private-abstract-method",
          "private-method",
          "instance-method",
          "abstract-method",
          "decorated-method",
          "method",
        ],
      },
    ],
    "@typescript-eslint/naming-convention": Array [
      "error",
      Object {
        "filter": Object {
          "match": false,
          "regex": "[- ]",
        },
        "format": Array [
          "strictCamelCase",
        ],
        "leadingUnderscore": "allowSingleOrDouble",
        "selector": Array [
          "variable",
          "function",
          "classProperty",
          "objectLiteralProperty",
          "parameterProperty",
          "classMethod",
          "objectLiteralMethod",
          "typeMethod",
          "accessor",
        ],
        "trailingUnderscore": "allow",
      },
      Object {
        "format": Array [
          "StrictPascalCase",
        ],
        "selector": "typeLike",
      },
      Object {
        "format": Array [
          "StrictPascalCase",
        ],
        "prefix": Array [
          "is",
          "has",
          "can",
          "should",
          "will",
          "did",
        ],
        "selector": "variable",
        "types": Array [
          "boolean",
        ],
      },
      Object {
        "filter": "^(?!I)[A-Z]",
        "format": Array [
          "StrictPascalCase",
        ],
        "selector": "interface",
      },
      Object {
        "filter": "^T$|^[A-Z][a-zA-Z]+$",
        "format": Array [
          "StrictPascalCase",
        ],
        "selector": "typeParameter",
      },
      Object {
        "format": null,
        "modifiers": Array [
          "requiresQuotes",
        ],
        "selector": Array [
          "classProperty",
          "objectLiteralProperty",
        ],
      },
    ],
    "@typescript-eslint/no-array-constructor": Array [
      "warn",
    ],
    "@typescript-eslint/no-base-to-string": Array [
      "error",
    ],
    "@typescript-eslint/no-confusing-void-expression": Array [
      "warn",
    ],
    "@typescript-eslint/no-dupe-class-members": Array [
      "error",
    ],
    "@typescript-eslint/no-duplicate-imports": Array [
      "error",
    ],
    "@typescript-eslint/no-dynamic-delete": Array [
      "warn",
    ],
    "@typescript-eslint/no-empty-function": Array [
      "error",
    ],
    "@typescript-eslint/no-empty-interface": Array [
      "warn",
      Object {
        "allowSingleExtends": true,
      },
    ],
    "@typescript-eslint/no-explicit-any": Array [
      "warn",
    ],
    "@typescript-eslint/no-extra-non-null-assertion": Array [
      "warn",
    ],
    "@typescript-eslint/no-extraneous-class": Array [
      "error",
      Object {
        "allowConstructorOnly": false,
        "allowEmpty": false,
        "allowStaticOnly": false,
        "allowWithDecorator": true,
      },
    ],
    "@typescript-eslint/no-floating-promises": Array [
      "error",
      Object {
        "ignoreIIFE": true,
        "ignoreVoid": true,
      },
    ],
    "@typescript-eslint/no-for-in-array": Array [
      "error",
    ],
    "@typescript-eslint/no-implicit-any-catch": Array [
      "warn",
    ],
    "@typescript-eslint/no-implied-eval": Array [
      "error",
    ],
    "@typescript-eslint/no-inferrable-types": Array [
      "warn",
    ],
    "@typescript-eslint/no-invalid-this": Array [
      "error",
    ],
    "@typescript-eslint/no-invalid-void-type": Array [
      "error",
    ],
    "@typescript-eslint/no-loop-func": Array [
      "error",
    ],
    "@typescript-eslint/no-loss-of-precision": Array [
      "error",
    ],
    "@typescript-eslint/no-meaningless-void-operator": Array [
      "warn",
    ],
    "@typescript-eslint/no-misused-new": Array [
      "error",
    ],
    "@typescript-eslint/no-misused-promises": Array [
      "error",
      Object {
        "checksConditionals": true,
        "checksVoidReturn": false,
      },
    ],
    "@typescript-eslint/no-namespace": Array [
      "error",
    ],
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": Array [
      "error",
    ],
    "@typescript-eslint/no-non-null-asserted-optional-chain": Array [
      "error",
    ],
    "@typescript-eslint/no-non-null-assertion": Array [
      "error",
    ],
    "@typescript-eslint/no-parameter-properties": Array [
      "error",
    ],
    "@typescript-eslint/no-redeclare": Array [
      "error",
    ],
    "@typescript-eslint/no-require-imports": Array [
      "error",
    ],
    "@typescript-eslint/no-restricted-imports": Array [
      "error",
      Array [
        "error",
        "domain",
        "freelist",
        "smalloc",
        "punycode",
        "sys",
        "querystring",
        "colors",
      ],
    ],
    "@typescript-eslint/no-shadow": Array [
      "error",
    ],
    "@typescript-eslint/no-this-alias": Array [
      "error",
      Object {
        "allowDestructuring": true,
      },
    ],
    "@typescript-eslint/no-throw-literal": Array [
      "error",
      Object {
        "allowThrowingAny": false,
        "allowThrowingUnknown": true,
      },
    ],
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-condition": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-qualifier": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-type-arguments": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-type-assertion": Array [
      "warn",
    ],
    "@typescript-eslint/no-unnecessary-type-constraint": Array [
      "warn",
    ],
    "@typescript-eslint/no-unsafe-argument": Array [
      "error",
    ],
    "@typescript-eslint/no-unsafe-assignment": Array [
      "error",
    ],
    "@typescript-eslint/no-unsafe-call": Array [
      "error",
    ],
    "@typescript-eslint/no-unsafe-member-access": Array [
      "error",
    ],
    "@typescript-eslint/no-unsafe-return": Array [
      "error",
    ],
    "@typescript-eslint/no-unused-expressions": Array [
      "error",
    ],
    "@typescript-eslint/no-unused-vars": Array [
      "error",
      Object {
        "args": "after-used",
        "argsIgnorePattern": "^_",
        "caughtErrors": "all",
        "caughtErrorsIgnorePattern": "^_$",
        "ignoreRestSiblings": true,
        "vars": "all",
      },
    ],
    "@typescript-eslint/no-use-before-define": Array [
      "error",
      "nofunc",
    ],
    "@typescript-eslint/no-useless-constructor": Array [
      "error",
    ],
    "@typescript-eslint/no-var-requires": Array [
      "error",
    ],
    "@typescript-eslint/non-nullable-type-assertion-style": Array [
      "warn",
    ],
    "@typescript-eslint/padding-line-between-statements": Array [
      "warn",
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "multiline-block-like",
      },
    ],
    "@typescript-eslint/prefer-as-const": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-enum-initializers": Array [
      "error",
    ],
    "@typescript-eslint/prefer-for-of": Array [
      "error",
    ],
    "@typescript-eslint/prefer-function-type": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-includes": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-literal-enum-member": Array [
      "error",
    ],
    "@typescript-eslint/prefer-namespace-keyword": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-nullish-coalescing": Array [
      "error",
    ],
    "@typescript-eslint/prefer-optional-chain": Array [
      "error",
    ],
    "@typescript-eslint/prefer-readonly": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-reduce-type-parameter": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-regexp-exec": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-return-this-type": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-string-starts-ends-with": Array [
      "warn",
    ],
    "@typescript-eslint/prefer-ts-expect-error": Array [
      "warn",
    ],
    "@typescript-eslint/promise-function-async": Array [
      "warn",
    ],
    "@typescript-eslint/require-array-sort-compare": Array [
      "error",
      Object {
        "ignoreStringArrays": true,
      },
    ],
    "@typescript-eslint/require-await": Array [
      "error",
    ],
    "@typescript-eslint/restrict-plus-operands": Array [
      "error",
      Object {
        "allowAny": false,
        "checkCompoundAssignments": true,
      },
    ],
    "@typescript-eslint/restrict-template-expressions": Array [
      "error",
      Object {
        "allowNumber": true,
      },
    ],
    "@typescript-eslint/return-await": Array [
      "warn",
    ],
    "@typescript-eslint/switch-exhaustiveness-check": Array [
      "error",
    ],
    "@typescript-eslint/triple-slash-reference": Array [
      "error",
    ],
    "@typescript-eslint/unbound-method": Array [
      "error",
    ],
    "@typescript-eslint/unified-signatures": Array [
      "error",
    ],
    "accessor-pairs": Array [
      "error",
    ],
    "array-callback-return": Array [
      "error",
    ],
    "arrow-body-style": Array [
      "warn",
    ],
    "block-scoped-var": Array [
      "error",
    ],
    "camelcase": Array [
      "error",
      Object {
        "properties": "always",
      },
    ],
    "capitalized-comments": Array [
      "warn",
      "always",
      Object {
        "ignoreConsecutiveComments": true,
        "ignoreInlineComments": true,
        "ignorePattern": "pragma|ignore|prettier-ignore|webpack\\\\w+:|c8",
      },
    ],
    "class-methods-use-this": Array [
      "error",
      Object {
        "exceptMethods": Array [
          "render",
          "getInitialState",
          "getDefaultProps",
          "getChildContext",
          "componentWillMount",
          "UNSAFE_componentWillMount",
          "componentDidMount",
          "componentWillReceiveProps",
          "UNSAFE_componentWillReceiveProps",
          "shouldComponentUpdate",
          "componentWillUpdate",
          "UNSAFE_componentWillUpdate",
          "componentDidUpdate",
          "componentWillUnmount",
          "componentDidCatch",
          "getSnapshotBeforeUpdate",
        ],
      },
    ],
    "complexity": Array [
      "error",
      20,
    ],
    "constructor-super": Array [
      "error",
    ],
    "default-case": Array [
      "error",
      Object {
        "commentPattern": "^no default$",
      },
    ],
    "default-case-last": Array [
      "error",
    ],
    "eqeqeq": Array [
      "warn",
      "smart",
    ],
    "for-direction": Array [
      "error",
    ],
    "func-name-matching": Array [
      "error",
    ],
    "func-names": Array [
      "error",
    ],
    "getter-return": Array [
      "error",
    ],
    "grouped-accessor-pairs": Array [
      "error",
      "getBeforeSet",
    ],
    "guard-for-in": Array [
      "error",
    ],
    "id-denylist": Array [
      "error",
    ],
    "id-match": Array [
      "error",
      "^\\\\$?(__)?(([A-Z]|[a-z]|[0-9]+)|([A-Z_]))*\\\\$?$",
    ],
    "import/default": Array [
      "error",
    ],
    "import/export": Array [
      "error",
    ],
    "import/first": Array [
      "warn",
    ],
    "import/no-absolute-path": Array [
      "error",
    ],
    "import/no-amd": Array [
      "error",
    ],
    "import/no-anonymous-default-export": Array [
      "error",
    ],
    "import/no-deprecated": Array [
      "error",
    ],
    "import/no-duplicates": Array [
      "warn",
    ],
    "import/no-extraneous-dependencies": Array [
      "error",
    ],
    "import/no-import-module-exports": Array [
      "warn",
    ],
    "import/no-mutable-exports": Array [
      "error",
    ],
    "import/no-named-as-default": Array [
      "error",
    ],
    "import/no-named-as-default-member": Array [
      "error",
    ],
    "import/no-named-default": Array [
      "error",
    ],
    "import/no-relative-packages": Array [
      "error",
    ],
    "import/no-self-import": Array [
      "error",
    ],
    "import/no-unresolved": Array [
      "error",
    ],
    "import/no-webpack-loader-syntax": Array [
      "error",
    ],
    "import/order": Array [
      "warn",
      Object {
        "groups": Array [
          "builtin",
          Array [
            "external",
            "internal",
          ],
          "parent",
          Array [
            "sibling",
            "index",
          ],
        ],
      },
    ],
    "jsx-a11y/accessible-emoji": Array [
      "error",
    ],
    "jsx-a11y/alt-text": Array [
      "error",
    ],
    "jsx-a11y/anchor-has-content": Array [
      "error",
    ],
    "jsx-a11y/anchor-is-valid": Array [
      "error",
      Object {
        "aspects": Array [
          "noHref",
          "invalidHref",
        ],
      },
    ],
    "jsx-a11y/aria-activedescendant-has-tabindex": Array [
      "error",
    ],
    "jsx-a11y/aria-props": Array [
      "error",
    ],
    "jsx-a11y/aria-proptypes": Array [
      "error",
    ],
    "jsx-a11y/aria-role": Array [
      "error",
      Object {
        "ignoreNonDOM": true,
      },
    ],
    "jsx-a11y/aria-unsupported-elements": Array [
      "error",
    ],
    "jsx-a11y/autocomplete-valid": Array [
      "error",
    ],
    "jsx-a11y/click-events-have-key-events": Array [
      "error",
    ],
    "jsx-a11y/heading-has-content": Array [
      "error",
    ],
    "jsx-a11y/html-has-lang": Array [
      "error",
    ],
    "jsx-a11y/iframe-has-title": Array [
      "error",
    ],
    "jsx-a11y/img-redundant-alt": Array [
      "error",
    ],
    "jsx-a11y/interactive-supports-focus": Array [
      "error",
      Object {
        "tabbable": Array [
          "button",
          "checkbox",
          "link",
          "searchbox",
          "spinbutton",
          "switch",
          "textbox",
        ],
      },
    ],
    "jsx-a11y/lang": Array [
      "error",
    ],
    "jsx-a11y/media-has-caption": Array [
      "error",
    ],
    "jsx-a11y/mouse-events-have-key-events": Array [
      "error",
    ],
    "jsx-a11y/no-access-key": Array [
      "error",
    ],
    "jsx-a11y/no-distracting-elements": Array [
      "error",
    ],
    "jsx-a11y/no-interactive-element-to-noninteractive-role": Array [
      "error",
      Object {
        "canvas": Array [
          "img",
        ],
        "tr": Array [
          "none",
          "presentation",
        ],
      },
    ],
    "jsx-a11y/no-noninteractive-element-interactions": Array [
      "error",
      Object {
        "alert": Array [
          "onKeyUp",
          "onKeyDown",
          "onKeyPress",
        ],
        "body": Array [
          "onError",
          "onLoad",
        ],
        "dialog": Array [
          "onKeyUp",
          "onKeyDown",
          "onKeyPress",
        ],
        "handlers": Array [
          "onClick",
          "onError",
          "onLoad",
          "onMouseDown",
          "onMouseUp",
          "onKeyPress",
          "onKeyDown",
          "onKeyUp",
        ],
        "iframe": Array [
          "onError",
          "onLoad",
        ],
        "img": Array [
          "onError",
          "onLoad",
        ],
      },
    ],
    "jsx-a11y/no-noninteractive-element-to-interactive-role": Array [
      "error",
      Object {
        "fieldset": Array [
          "radiogroup",
          "presentation",
        ],
        "li": Array [
          "menuitem",
          "option",
          "row",
          "tab",
          "treeitem",
        ],
        "ol": Array [
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "tablist",
          "tree",
          "treegrid",
        ],
        "table": Array [
          "grid",
        ],
        "td": Array [
          "gridcell",
        ],
        "ul": Array [
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "tablist",
          "tree",
          "treegrid",
        ],
      },
    ],
    "jsx-a11y/no-noninteractive-tabindex": Array [
      "error",
      Object {
        "allowExpressionValues": true,
        "roles": Array [
          "tabpanel",
        ],
        "tags": Array [],
      },
    ],
    "jsx-a11y/no-redundant-roles": Array [
      "error",
    ],
    "jsx-a11y/no-static-element-interactions": Array [
      "error",
      Object {
        "allowExpressionValues": true,
        "handlers": Array [
          "onClick",
          "onMouseDown",
          "onMouseUp",
          "onKeyPress",
          "onKeyDown",
          "onKeyUp",
        ],
      },
    ],
    "jsx-a11y/role-has-required-aria-props": Array [
      "error",
    ],
    "jsx-a11y/role-supports-aria-props": Array [
      "error",
    ],
    "jsx-a11y/scope": Array [
      "error",
    ],
    "jsx-a11y/tabindex-no-positive": Array [
      "error",
    ],
    "max-depth": Array [
      "error",
      4,
    ],
    "max-lines": Array [
      "error",
      Object {
        "max": 2500,
        "skipBlankLines": false,
        "skipComments": false,
      },
    ],
    "max-nested-callbacks": Array [
      "error",
      4,
    ],
    "max-params": Array [
      "error",
      Object {
        "max": 4,
      },
    ],
    "max-statements-per-line": Array [
      "error",
    ],
    "new-cap": Array [
      "error",
    ],
    "no-alert": Array [
      "error",
    ],
    "no-async-promise-executor": Array [
      "error",
    ],
    "no-await-in-loop": Array [
      "error",
    ],
    "no-bitwise": Array [
      "error",
    ],
    "no-buffer-constructor": Array [
      "error",
    ],
    "no-caller": Array [
      "error",
    ],
    "no-case-declarations": Array [
      "error",
    ],
    "no-class-assign": Array [
      "error",
    ],
    "no-compare-neg-zero": Array [
      "error",
    ],
    "no-cond-assign": Array [
      "error",
    ],
    "no-const-assign": Array [
      "error",
    ],
    "no-constant-condition": Array [
      "error",
    ],
    "no-constructor-return": Array [
      "error",
    ],
    "no-control-regex": Array [
      "error",
    ],
    "no-debugger": Array [
      "error",
    ],
    "no-delete-var": Array [
      "error",
    ],
    "no-div-regex": Array [
      "warn",
    ],
    "no-dupe-args": Array [
      "error",
    ],
    "no-dupe-else-if": Array [
      "error",
    ],
    "no-dupe-keys": Array [
      "error",
    ],
    "no-duplicate-case": Array [
      "error",
    ],
    "no-else-return": Array [
      "warn",
      Object {
        "allowElseIf": false,
      },
    ],
    "no-empty": Array [
      "error",
    ],
    "no-empty-character-class": Array [
      "error",
    ],
    "no-empty-pattern": Array [
      "error",
    ],
    "no-eq-null": Array [
      "error",
    ],
    "no-eval": Array [
      "error",
    ],
    "no-ex-assign": Array [
      "error",
    ],
    "no-extend-native": Array [
      "error",
    ],
    "no-extra-bind": Array [
      "warn",
    ],
    "no-extra-boolean-cast": Array [
      "warn",
    ],
    "no-extra-label": Array [
      "warn",
    ],
    "no-fallthrough": Array [
      "error",
    ],
    "no-func-assign": Array [
      "error",
    ],
    "no-global-assign": Array [
      "error",
    ],
    "no-implicit-coercion": Array [
      "warn",
    ],
    "no-implicit-globals": Array [
      "error",
    ],
    "no-import-assign": Array [
      "error",
    ],
    "no-inner-declarations": Array [
      "error",
    ],
    "no-invalid-regexp": Array [
      "error",
    ],
    "no-irregular-whitespace": Array [
      "error",
    ],
    "no-iterator": Array [
      "error",
    ],
    "no-label-var": Array [
      "error",
    ],
    "no-labels": Array [
      "error",
    ],
    "no-lone-blocks": Array [
      "error",
    ],
    "no-lonely-if": Array [
      "warn",
    ],
    "no-misleading-character-class": Array [
      "error",
    ],
    "no-multi-assign": Array [
      "error",
    ],
    "no-multi-str": Array [
      "error",
    ],
    "no-native-reassign": Array [
      "error",
    ],
    "no-negated-condition": Array [
      "error",
    ],
    "no-negated-in-lhs": Array [
      "error",
    ],
    "no-new": Array [
      "error",
    ],
    "no-new-func": Array [
      "error",
    ],
    "no-new-object": Array [
      "error",
    ],
    "no-new-symbol": Array [
      "error",
    ],
    "no-new-wrappers": Array [
      "error",
    ],
    "no-nonoctal-decimal-escape": Array [
      "error",
    ],
    "no-obj-calls": Array [
      "error",
    ],
    "no-octal": Array [
      "error",
    ],
    "no-octal-escape": Array [
      "error",
    ],
    "no-promise-executor-return": Array [
      "error",
    ],
    "no-proto": Array [
      "error",
    ],
    "no-prototype-builtins": Array [
      "error",
    ],
    "no-regex-spaces": Array [
      "warn",
    ],
    "no-restricted-globals": Array [
      "error",
      "addEventListener",
      "blur",
      "close",
      "closed",
      "confirm",
      "defaultStatus",
      "defaultstatus",
      "event",
      "external",
      "find",
      "focus",
      "frameElement",
      "frames",
      "history",
      "innerHeight",
      "innerWidth",
      "length",
      "location",
      "locationbar",
      "menubar",
      "moveBy",
      "moveTo",
      "name",
      "onblur",
      "onerror",
      "onfocus",
      "onload",
      "onresize",
      "onunload",
      "open",
      "opener",
      "opera",
      "outerHeight",
      "outerWidth",
      "pageXOffset",
      "pageYOffset",
      "parent",
      "print",
      "removeEventListener",
      "resizeBy",
      "resizeTo",
      "screen",
      "screenLeft",
      "screenTop",
      "screenX",
      "screenY",
      "scroll",
      "scrollbars",
      "scrollBy",
      "scrollTo",
      "scrollX",
      "scrollY",
      "self",
      "status",
      "statusbar",
      "stop",
      "toolbar",
      "top",
    ],
    "no-restricted-properties": Array [
      "error",
      Object {
        "message": "Please use import() instead. More info: https://facebook.github.io/create-react-app/docs/code-splitting",
        "object": "require",
        "property": "ensure",
      },
      Object {
        "message": "Please use import() instead. More info: https://facebook.github.io/create-react-app/docs/code-splitting",
        "object": "System",
        "property": "import",
      },
    ],
    "no-restricted-syntax": Array [
      "error",
      "WithStatement",
    ],
    "no-return-assign": Array [
      "error",
    ],
    "no-return-await": Array [
      "error",
    ],
    "no-script-url": Array [
      "error",
    ],
    "no-self-assign": Array [
      "error",
    ],
    "no-self-compare": Array [
      "error",
    ],
    "no-sequences": Array [
      "error",
    ],
    "no-setter-return": Array [
      "error",
    ],
    "no-shadow-restricted-names": Array [
      "error",
    ],
    "no-sparse-arrays": Array [
      "error",
    ],
    "no-template-curly-in-string": Array [
      "error",
    ],
    "no-this-before-super": Array [
      "error",
    ],
    "no-undef": Array [
      "error",
      Object {
        "typeof": true,
      },
    ],
    "no-undef-init": Array [
      "warn",
    ],
    "no-underscore-dangle": Array [
      "error",
      Object {
        "allow": Array [
          "__REDUX_DEVTOOLS_EXTENSION_COMPOSE__",
        ],
        "allowAfterSuper": false,
        "allowAfterThis": false,
        "enforceInMethodNames": true,
      },
    ],
    "no-unmodified-loop-condition": Array [
      "error",
    ],
    "no-unneeded-ternary": Array [
      "warn",
    ],
    "no-unreachable": Array [
      "error",
    ],
    "no-unreachable-loop": Array [
      "error",
    ],
    "no-unsafe-finally": Array [
      "error",
    ],
    "no-unsafe-negation": Array [
      "error",
    ],
    "no-unsafe-optional-chaining": Array [
      "error",
      Object {
        "disallowArithmeticOperators": true,
      },
    ],
    "no-unused-labels": Array [
      "warn",
    ],
    "no-unused-private-class-members": Array [
      "error",
    ],
    "no-use-before-define": Array [
      "error",
      Object {
        "classes": false,
        "functions": false,
        "variables": false,
      },
    ],
    "no-useless-backreference": Array [
      "error",
    ],
    "no-useless-call": Array [
      "error",
    ],
    "no-useless-catch": Array [
      "error",
    ],
    "no-useless-computed-key": Array [
      "warn",
      Object {
        "enforceForClassMembers": true,
      },
    ],
    "no-useless-concat": Array [
      "error",
    ],
    "no-useless-escape": Array [
      "error",
    ],
    "no-useless-rename": Array [
      "warn",
    ],
    "no-useless-return": Array [
      "warn",
    ],
    "no-var": Array [
      "warn",
    ],
    "no-void": Array [
      "error",
      Object {
        "allowAsStatement": true,
      },
    ],
    "no-with": Array [
      "error",
    ],
    "object-shorthand": Array [
      "warn",
      "properties",
    ],
    "one-var": Array [
      "warn",
      "never",
    ],
    "operator-assignment": Array [
      "warn",
      "always",
    ],
    "prefer-arrow-callback": Array [
      "warn",
      Object {
        "allowNamedFunctions": true,
      },
    ],
    "prefer-const": Array [
      "warn",
      Object {
        "destructuring": "all",
      },
    ],
    "prefer-destructuring": Array [
      "warn",
      Object {
        "AssignmentExpression": Object {
          "array": false,
          "object": false,
        },
        "VariableDeclarator": Object {
          "array": false,
          "object": true,
        },
      },
      Object {
        "enforceForRenamedProperties": false,
      },
    ],
    "prefer-exponentiation-operator": Array [
      "warn",
    ],
    "prefer-numeric-literals": Array [
      "warn",
    ],
    "prefer-object-has-own": Array [
      "warn",
    ],
    "prefer-object-spread": Array [
      "warn",
    ],
    "prefer-promise-reject-errors": Array [
      "error",
      Object {
        "allowEmptyReject": true,
      },
    ],
    "prefer-regex-literals": Array [
      "error",
    ],
    "prefer-rest-params": Array [
      "error",
    ],
    "prefer-spread": Array [
      "error",
    ],
    "prefer-template": Array [
      "warn",
    ],
    "radix": Array [
      "error",
    ],
    "react-hooks/exhaustive-deps": Array [
      "warn",
    ],
    "react-hooks/rules-of-hooks": Array [
      "error",
    ],
    "react/boolean-prop-naming": Array [
      "error",
      Object {
        "validateNested": true,
      },
    ],
    "react/button-has-type": Array [
      "error",
    ],
    "react/destructuring-assignment": Array [
      "error",
      "always",
    ],
    "react/display-name": Array [
      "error",
    ],
    "react/forbid-foreign-prop-types": Array [
      "error",
      Object {
        "allowInPropTypes": true,
      },
    ],
    "react/forbid-prop-types": Array [
      "error",
      Object {
        "checkChildContextTypes": true,
        "checkContextTypes": true,
        "forbid": Array [
          "any",
          "array",
          "object",
        ],
      },
    ],
    "react/function-component-definition": Array [
      "warn",
      Object {
        "namedComponents": Array [
          "function-declaration",
          "function-expression",
        ],
        "unnamedComponents": "function-expression",
      },
    ],
    "react/hook-use-state": Array [
      "error",
    ],
    "react/iframe-missing-sandbox": Array [
      "error",
    ],
    "react/jsx-boolean-value": Array [
      "warn",
    ],
    "react/jsx-curly-brace-presence": Array [
      "warn",
      Object {
        "children": "never",
        "propElementValues": "always",
        "props": "never",
      },
    ],
    "react/jsx-filename-extension": Array [
      "error",
      Object {
        "extensions": Array [
          ".ts",
          ".tsx",
        ],
      },
    ],
    "react/jsx-fragments": Array [
      "warn",
      "syntax",
    ],
    "react/jsx-key": Array [
      "error",
      Object {
        "checkFragmentShorthand": true,
        "checkKeyMustBeforeSpread": true,
        "warnOnDuplicates": true,
      },
    ],
    "react/jsx-no-bind": Array [
      "error",
      Object {
        "allowArrowFunctions": true,
      },
    ],
    "react/jsx-no-comment-textnodes": Array [
      "error",
    ],
    "react/jsx-no-constructed-context-values": Array [
      "error",
    ],
    "react/jsx-no-duplicate-props": Array [
      "error",
      Object {
        "ignoreCase": true,
      },
    ],
    "react/jsx-no-script-url": Array [
      "error",
    ],
    "react/jsx-no-target-blank": Array [
      "warn",
      Object {
        "forms": true,
        "warnOnSpreadAttributes": true,
      },
    ],
    "react/jsx-no-undef": Array [
      "error",
    ],
    "react/jsx-no-useless-fragment": Array [
      "warn",
    ],
    "react/jsx-pascal-case": Array [
      "error",
    ],
    "react/jsx-props-no-spreading": Array [
      "error",
      Object {
        "custom": "enforce",
        "exceptions": Array [],
        "explicitSpread": "ignore",
        "html": "enforce",
      },
    ],
    "react/jsx-sort-props": Array [
      "warn",
      Object {
        "callbacksLast": true,
        "noSortAlphabetically": true,
        "reservedFirst": true,
        "shorthandFirst": true,
      },
    ],
    "react/jsx-uses-react": Array [
      "error",
    ],
    "react/jsx-uses-vars": Array [
      "error",
    ],
    "react/no-access-state-in-setstate": Array [
      "error",
    ],
    "react/no-array-index-key": Array [
      "error",
    ],
    "react/no-arrow-function-lifecycle": Array [
      "warn",
    ],
    "react/no-children-prop": Array [
      "error",
    ],
    "react/no-danger": Array [
      "error",
    ],
    "react/no-danger-with-children": Array [
      "error",
    ],
    "react/no-deprecated": Array [
      "error",
    ],
    "react/no-did-mount-set-state": Array [
      "error",
    ],
    "react/no-did-update-set-state": Array [
      "error",
    ],
    "react/no-direct-mutation-state": Array [
      "error",
    ],
    "react/no-find-dom-node": Array [
      "error",
    ],
    "react/no-invalid-html-attribute": Array [
      "warn",
    ],
    "react/no-is-mounted": Array [
      "error",
    ],
    "react/no-namespace": Array [
      "error",
    ],
    "react/no-redundant-should-component-update": Array [
      "error",
    ],
    "react/no-render-return-value": Array [
      "error",
    ],
    "react/no-string-refs": Array [
      "error",
      Object {
        "noTemplateLiterals": true,
      },
    ],
    "react/no-this-in-sfc": Array [
      "error",
    ],
    "react/no-typos": Array [
      "error",
    ],
    "react/no-unescaped-entities": Array [
      "error",
    ],
    "react/no-unknown-property": Array [
      "warn",
    ],
    "react/no-unsafe": Array [
      "error",
    ],
    "react/no-unstable-nested-components": Array [
      "error",
      Object {
        "allowAsProps": true,
      },
    ],
    "react/no-unused-class-component-methods": Array [
      "error",
    ],
    "react/no-unused-state": Array [
      "error",
    ],
    "react/no-will-update-set-state": Array [
      "error",
    ],
    "react/prefer-es6-class": Array [
      "error",
      "always",
    ],
    "react/prefer-exact-props": Array [
      "error",
    ],
    "react/prefer-read-only-props": Array [
      "warn",
    ],
    "react/prefer-stateless-function": Array [
      "error",
      Object {
        "ignorePureComponents": true,
      },
    ],
    "react/react-in-jsx-scope": Array [
      "error",
    ],
    "react/require-render-return": Array [
      "error",
    ],
    "react/self-closing-comp": Array [
      "warn",
    ],
    "react/sort-comp": Array [
      "error",
      Object {
        "groups": Object {
          "lifecycle": Array [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "getInitialState",
            "state",
            "getChildContext",
            "getDerivedStateFromProps",
            "componentWillMount",
            "UNSAFE_componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "UNSAFE_componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "UNSAFE_componentWillUpdate",
            "getSnapshotBeforeUpdate",
            "componentDidUpdate",
            "componentDidCatch",
            "componentWillUnmount",
          ],
          "rendering": Array [
            "/^render.+$/",
            "render",
          ],
        },
        "order": Array [
          "static-variables",
          "static-methods",
          "instance-variables",
          "lifecycle",
          "/^handle.+$/",
          "/^on.+$/",
          "getters",
          "setters",
          "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
          "instance-methods",
          "everything-else",
          "rendering",
        ],
      },
    ],
    "react/state-in-constructor": Array [
      "error",
      "never",
    ],
    "react/style-prop-object": Array [
      "error",
    ],
    "react/void-dom-elements-no-children": Array [
      "error",
    ],
    "require-yield": Array [
      "error",
    ],
    "spaced-comment": Array [
      "warn",
      "always",
      Object {
        "block": Object {
          "balanced": true,
          "exceptions": Array [
            "-",
            "+",
            "*",
          ],
          "markers": Array [
            "!",
            "*",
          ],
        },
        "line": Object {
          "exceptions": Array [
            "-",
            "+",
            "*",
          ],
          "markers": Array [
            "!",
            "/",
            "=>",
          ],
        },
      },
    ],
    "strict": Array [
      "warn",
    ],
    "symbol-description": Array [
      "error",
    ],
    "unicorn/better-regex": Array [
      "warn",
    ],
    "unicorn/catch-error-name": Array [
      "warn",
    ],
    "unicorn/consistent-destructuring": Array [
      "warn",
    ],
    "unicorn/consistent-function-scoping": Array [
      "error",
    ],
    "unicorn/error-message": Array [
      "error",
    ],
    "unicorn/escape-case": Array [
      "warn",
    ],
    "unicorn/expiring-todo-comments": Array [
      "error",
    ],
    "unicorn/explicit-length-check": Array [
      "warn",
    ],
    "unicorn/filename-case": Array [
      "error",
    ],
    "unicorn/import-style": Array [
      "error",
    ],
    "unicorn/new-for-builtins": Array [
      "warn",
    ],
    "unicorn/no-abusive-eslint-disable": Array [
      "error",
    ],
    "unicorn/no-array-callback-reference": Array [
      "error",
    ],
    "unicorn/no-array-for-each": Array [
      "warn",
    ],
    "unicorn/no-array-method-this-argument": Array [
      "warn",
    ],
    "unicorn/no-array-push-push": Array [
      "warn",
    ],
    "unicorn/no-array-reduce": Array [
      "error",
    ],
    "unicorn/no-await-expression-member": Array [
      "warn",
    ],
    "unicorn/no-console-spaces": Array [
      "warn",
    ],
    "unicorn/no-document-cookie": Array [
      "error",
    ],
    "unicorn/no-empty-file": Array [
      "error",
    ],
    "unicorn/no-for-loop": Array [
      "warn",
    ],
    "unicorn/no-hex-escape": Array [
      "warn",
    ],
    "unicorn/no-instanceof-array": Array [
      "warn",
    ],
    "unicorn/no-invalid-remove-event-listener": Array [
      "error",
    ],
    "unicorn/no-lonely-if": Array [
      "warn",
    ],
    "unicorn/no-new-array": Array [
      "warn",
    ],
    "unicorn/no-new-buffer": Array [
      "warn",
    ],
    "unicorn/no-object-as-default-parameter": Array [
      "error",
    ],
    "unicorn/no-process-exit": Array [
      "error",
    ],
    "unicorn/no-static-only-class": Array [
      "warn",
    ],
    "unicorn/no-thenable": Array [
      "error",
    ],
    "unicorn/no-this-assignment": Array [
      "error",
    ],
    "unicorn/no-unreadable-array-destructuring": Array [
      "warn",
    ],
    "unicorn/no-useless-fallback-in-spread": Array [
      "warn",
    ],
    "unicorn/no-useless-length-check": Array [
      "warn",
    ],
    "unicorn/no-useless-promise-resolve-reject": Array [
      "warn",
    ],
    "unicorn/no-useless-spread": Array [
      "warn",
    ],
    "unicorn/no-useless-undefined": Array [
      "warn",
    ],
    "unicorn/no-zero-fractions": Array [
      "warn",
    ],
    "unicorn/numeric-separators-style": Array [
      "warn",
    ],
    "unicorn/prefer-add-event-listener": Array [
      "warn",
    ],
    "unicorn/prefer-array-find": Array [
      "warn",
    ],
    "unicorn/prefer-array-flat": Array [
      "warn",
    ],
    "unicorn/prefer-array-flat-map": Array [
      "warn",
    ],
    "unicorn/prefer-array-index-of": Array [
      "warn",
    ],
    "unicorn/prefer-array-some": Array [
      "warn",
    ],
    "unicorn/prefer-code-point": Array [
      "error",
    ],
    "unicorn/prefer-date-now": Array [
      "warn",
    ],
    "unicorn/prefer-default-parameters": Array [
      "warn",
    ],
    "unicorn/prefer-dom-node-append": Array [
      "warn",
    ],
    "unicorn/prefer-dom-node-dataset": Array [
      "warn",
    ],
    "unicorn/prefer-dom-node-remove": Array [
      "warn",
    ],
    "unicorn/prefer-dom-node-text-content": Array [
      "error",
    ],
    "unicorn/prefer-export-from": Array [
      "warn",
    ],
    "unicorn/prefer-includes": Array [
      "warn",
    ],
    "unicorn/prefer-json-parse-buffer": Array [
      "warn",
    ],
    "unicorn/prefer-keyboard-event-key": Array [
      "warn",
    ],
    "unicorn/prefer-math-trunc": Array [
      "warn",
    ],
    "unicorn/prefer-modern-dom-apis": Array [
      "warn",
    ],
    "unicorn/prefer-module": Array [
      "warn",
    ],
    "unicorn/prefer-negative-index": Array [
      "warn",
    ],
    "unicorn/prefer-node-protocol": Array [
      "warn",
    ],
    "unicorn/prefer-number-properties": Array [
      "warn",
    ],
    "unicorn/prefer-object-from-entries": Array [
      "warn",
    ],
    "unicorn/prefer-optional-catch-binding": Array [
      "warn",
    ],
    "unicorn/prefer-prototype-methods": Array [
      "warn",
    ],
    "unicorn/prefer-query-selector": Array [
      "warn",
    ],
    "unicorn/prefer-reflect-apply": Array [
      "warn",
    ],
    "unicorn/prefer-regexp-test": Array [
      "warn",
    ],
    "unicorn/prefer-set-has": Array [
      "warn",
    ],
    "unicorn/prefer-spread": Array [
      "warn",
    ],
    "unicorn/prefer-string-slice": Array [
      "warn",
    ],
    "unicorn/prefer-string-starts-ends-with": Array [
      "warn",
    ],
    "unicorn/prefer-string-trim-start-end": Array [
      "warn",
    ],
    "unicorn/prefer-switch": Array [
      "warn",
    ],
    "unicorn/prefer-ternary": Array [
      "warn",
    ],
    "unicorn/prefer-type-error": Array [
      "warn",
    ],
    "unicorn/prevent-abbreviations": Array [
      "warn",
    ],
    "unicorn/relative-url-style": Array [
      "warn",
    ],
    "unicorn/require-array-join-separator": Array [
      "warn",
    ],
    "unicorn/require-number-to-fixed-digits-argument": Array [
      "warn",
    ],
    "unicorn/template-indent": Array [
      "warn",
    ],
    "unicorn/text-encoding-identifier-case": Array [
      "error",
    ],
    "unicorn/throw-new-error": Array [
      "warn",
    ],
    "use-isnan": Array [
      "error",
    ],
    "valid-typeof": Array [
      "error",
    ],
    "vars-on-top": Array [
      "error",
    ],
    "yoda": Array [
      "warn",
    ],
  },
  "settings": Object {
    "import/extensions": Array [
      ".js",
      ".ts",
      ".jsx",
      ".tsx",
    ],
    "import/parsers": Object {
      "@typescript-eslint/parser": Array [
        ".ts",
        ".tsx",
      ],
    },
    "import/resolver": Object {
      "node": Object {
        "extensions": Array [
          ".js",
          ".jsx",
          ".ts",
          ".tsx",
        ],
      },
    },
    "propWrapperFunctions": Array [
      "forbidExtraProps",
      "exact",
      "Object.freeze",
    ],
    "react": Object {
      "pragma": "React",
      "version": "detect",
    },
  },
}
`;
